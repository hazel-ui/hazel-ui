{"version":3,"file":"package-components-Table-stories-Table-stories.882ad42a.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAkBA;;;;;;;;;AASA;;;;;AAKA;;AAGA;AACA;AACA;;;;;;AAMA;;;;;;;;;;;;;;AAcA;;;AAGA;;;;;AAMA;AACA;;;AAGA;;;;AAIA;;;;;;;AAOA;;;;AAIA;;;;;;AAOA;;AAEA;;;;AAIA;;AAGA;;AChGA","sources":["webpack://hazel-ui/./src/package/components/Table/styles.ts","webpack://hazel-ui/./src/package/components/Table/utils.tsx"],"sourcesContent":["import { styled } from \"styled-components\";\nimport { Color } from \"../../foundation/Color/Color.js\";\nimport { MediaQuery } from \"../../foundation/MediaQuery/MediaQuery.js\";\nimport { Theme } from \"../../foundation/Theme/Theme.js\";\n// <table>\nexport const TableContainer = styled.table `\n  /* enable scroll on small width */\n  display: block;\n  overflow: auto;\n  border-collapse: collapse;\n\n  /* width */\n  ::-webkit-scrollbar {\n    height: 0.6rem;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: ${Color.gray2};\n    border-radius: 10px;\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.2);\n    border-radius: 10px;\n    background: ${Color.gray8};\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: ${Color.gray9};\n  }\n`;\nexport const Th = styled.th `\n  font-family: ${Theme.font.sansSerif};\n  font-weight: ${Theme.fontWeight.bold};\n  line-height: 1.29;\n\n  height: 100px;\n  min-width: 142px;\n  padding: 0px 27px;\n  background-color: ${Color.gray8};\n  border-bottom: 1px solid rgba(230, 230, 250, 0.7);\n\n  font-size: 0.9rem;\n  text-align: right;\n\n  &:nth-of-type(1) {\n    font-size: 1.125rem;\n    text-align: left;\n\n    /* make first column header sticky */\n    left: 0;\n    position: sticky;\n\n    box-shadow: 6px 0px 25px 0px ${Color.gray3};\n  }\n\n  ${MediaQuery.minWidth.tablet} {\n    &:nth-of-type(1) {\n      box-shadow: none;\n    }\n  }\n`;\nexport const Td = styled.td `\n  font-family: ${Theme.font.sansSerif};\n  padding: 20px 27px;\n\n  font-weight: ${Theme.fontWeight.regular};\n  text-align: right;\n\n  &:nth-of-type(1) {\n    font-weight: ${Theme.fontWeight.bold};\n    text-align: left;\n\n    /* make first column body sticky */\n    left: 0;\n    position: sticky;\n\n    box-shadow: 6px 0px 25px 0px ${Color.gray3};\n    clip-path: inset(0px -30px 0px 0px);\n  }\n\n  ${MediaQuery.minWidth.tablet} {\n    &:nth-of-type(1) {\n      box-shadow: none;\n      clip-path: none;\n    }\n  }\n`;\nexport const Tr = styled.tr `\n  &:nth-of-type(odd) td {\n    background-color: ${Color.gray3};\n  }\n\n  &:nth-of-type(even) td {\n    background-color: ${Color.gray4};\n  }\n`;\nexport const TrHead = styled.tr `\n  padding: 0px 27px;\n`;\n","import { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * If data in a column is numeric and no custom Cell render function\n * is provided then add a custom Cell render function to format the numbers\n */\nexport function processColumns(columns, data) {\n    let columnIndex = 0;\n    for (let td in data[0]) {\n        if (typeof data[0][td] === \"number\" && !(\"Cell\" in columns[columnIndex])) {\n            columns[columnIndex][\"Cell\"] = (props) => (_jsx(_Fragment, { children: props.value.toLocaleString(\"en-IN\") }));\n        }\n        columnIndex++;\n    }\n    return columns;\n}\n"],"names":[],"sourceRoot":""}