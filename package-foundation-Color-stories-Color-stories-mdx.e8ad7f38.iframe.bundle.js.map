{"version":3,"file":"package-foundation-Color-stories-Color-stories-mdx.e8ad7f38.iframe.bundle.js","mappings":";AAUA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAIA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;;AAGA;AAtBA;AChEA;AAIA;ACFA;AACA;;;;;;;;;AAUA","sources":["webpack://hazel-ui/./src/package/foundation/Typography/styles.ts","webpack://hazel-ui/./src/package/foundation/Typography/Typography.tsx","webpack://hazel-ui/./src/package/foundation/Color/stories/ColorBlock.tsx"],"sourcesContent":["import { latin } from \"@bbc/gel-foundations/scripts\";\nimport { getBodyCopy, getBrevier, getCanon, getDoublePica, getFoolscap, getGreatPrimer, getLongPrimer, getParagon, getPica, getTrafalgar, } from \"@bbc/gel-foundations/typography\";\nimport { css } from \"styled-components\";\nimport { MediaQuery } from \"../MediaQuery/MediaQuery.js\";\nimport { Theme } from \"../Theme/Theme.js\";\nimport { letterSpacing } from \"./responsive/letterSpacing.js\";\nexport function applyTypographyVariant(variant) {\n    switch (variant) {\n        case \"display\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getFoolscap(latin)};\n      `;\n        case \"h1\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getCanon(latin)};\n      `;\n        case \"h2\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getTrafalgar(latin)};\n      `;\n        case \"h3\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getParagon(latin)};\n      `;\n        case \"h4\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getDoublePica(latin)};\n      `;\n        case \"h5\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getGreatPrimer(latin)};\n      `;\n        case \"h6\":\n            return css `\n        font-family: ${Theme.font.serif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getPica(latin)};\n      `;\n        case \"p\":\n            return css `\n        font-family: ${Theme.font.sansSerif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getBodyCopy(latin)};\n      `;\n        case \"caption\":\n            return css `\n        font-family: ${Theme.font.sansSerif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getLongPrimer(latin)};\n      `;\n        case \"label\":\n            return css `\n        font-family: ${Theme.font.sansSerif};\n        font-weight: ${Theme.fontWeight.regular};\n        ${getBrevier(latin)};\n        /* ${applyTypographyMediaQueries(\"label\")}; */\n      `;\n        default:\n            return null;\n    }\n}\nfunction applyTypographyMediaQueries(variant) {\n    if (variant === \"none\")\n        return null;\n    return css `\n    letter-spacing: ${letterSpacing[variant].mobileSmall};\n\n    ${MediaQuery.minWidth.mobile} {\n      letter-spacing: ${letterSpacing[variant].mobile};\n    }\n\n    ${MediaQuery.minWidth.tablet} {\n      letter-spacing: ${letterSpacing[variant].tablet};\n    }\n\n    ${MediaQuery.minWidth.desktop} {\n      letter-spacing: ${letterSpacing[variant].desktop};\n    }\n  `;\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { styled } from \"styled-components\";\nimport { applyTypographyVariant } from \"./styles.js\";\nimport { TextTag } from \"./types.js\";\nconst StyledDiv = styled.div `\n  ${(props) => \n// eslint-disable-next-line implicit-arrow-linebreak\nprops.variant && applyTypographyVariant(props.variant)};\n`;\nexport function Typography({ color = \"var(--gray12)\", variant = \"p\", children, sx = {}, }) {\n    return (_jsx(StyledDiv, Object.assign({ variant: variant, as: TextTag[variant], style: Object.assign({ color }, sx) }, { children: children })));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { styled } from \"styled-components\";\nimport { Typography } from \"../../Typography/Typography.js\";\nimport { Color } from \"../Color.js\";\nimport { copyToClipboard, getContrastColor, getCssVariableValue, } from \"./utils.js\";\nconst StyledDiv = styled.div `\n  color: ${(props) => getContrastColor(props.color)};\n  background-color: ${(props) => props.color};\n\n  text-align: center;\n  min-width: 264px;\n\n  height: 80px;\n  padding: 0 20px;\n  cursor: pointer;\n  align-items: center;\n`;\nexport function ColorBlock({ cardColor = Color.gray5, title = \"Unavailable\", }) {\n    const colorValue = getCssVariableValue(cardColor);\n    const [text, setText] = useState(colorValue);\n    function changeText(temporary, permanent) {\n        setText(temporary);\n        setTimeout(() => {\n            setText(permanent);\n        }, 800);\n    }\n    return (_jsx(StyledDiv, Object.assign({ color: colorValue, title: title, onClick: () => {\n            copyToClipboard(colorValue);\n            changeText(\"Copied!\", colorValue);\n        } }, { children: _jsxs(Typography, Object.assign({ variant: \"p\" }, { children: [`Color.${title}: ${cardColor}`, _jsx(\"br\", {}), text] })) })));\n}\nexport const ColorBlockContainer = styled.div `\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));\n  grid-gap: 1.6rem 1.6rem;\n`;\n"],"names":[],"sourceRoot":""}